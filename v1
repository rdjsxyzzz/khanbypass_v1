// ==UserScript==
// @name         Khan Modded Advanced
// @version      1.3.0
// @description  Automatiza y modifica interacciones en Khan Academy con panel de control, estadísticas, auto-resolver y sistema de activación
// @author       rxdrzx_
// @match        *://*.khanacademy.org/*
// @grant        none
// ==/UserScript==

// Clave de activación codificada (cambia esto por tu clave deseada)
const ENCODED_ACTIVATION_KEY = btoa('khanmod2023'); // Codifica tu clave aquí

let loadedPlugins = [];
let isActivated = false;
let autoResolverEnabled = false;

console.clear();
const noop = () => {};
console.warn = console.error = window.debug = noop;

const splashScreen = document.createElement('splashScreen');

class EventEmitter {
  constructor() { this.events = {}; }
  on(t, e) {
    (Array.isArray(t) ? t : [t]).forEach(t => {
      (this.events[t] = this.events[t] || []).push(e);
    });
  }
  off(t, e) {
    (Array.isArray(t) ? t : [t]).forEach(t => {
      this.events[t] && (this.events[t] = this.events[t].filter(h => h !== e));
    });
  }
  emit(t, ...e) {
    this.events[t]?.forEach(h => h(...e));
  }
  once(t, e) {
    const s = (...i) => {
      e(...i);
      this.off(t, s);
    };
    this.on(t, s);
  }
}

const plppdo = new EventEmitter();

// Observer otimizado
new MutationObserver(mutationsList =>
  mutationsList.some(m => m.type === 'childList') && plppdo.emit('domChanged')
).observe(document.body, { childList: true, subtree: true });

// Configuración global
let config = {
  clickInterval: 25000, // ms
  videoBypassEnabled: true
};

// Estadísticas
let stats = {
  exercisesCompleted: 0,
  videosWatched: 0,
  timeSaved: 0
};

let startTime = Date.now();

// Panel flotante
function createFloatingPanel() {
  const panel = document.createElement('div');
  panel.id = 'khanModPanel';
  panel.style.cssText = `
    position: fixed;
    top: 10px;
    right: 10px;
    width: 280px;
    background: rgba(0, 0, 0, 0.8);
    color: white;
    padding: 10px;
    border-radius: 8px;
    z-index: 10000;
    font-family: Arial, sans-serif;
    font-size: 12px;
    box-shadow: 0 0 10px rgba(0,0,0,0.5);
    max-height: 400px;
    overflow-y: auto;
  `;

  updatePanel(panel);
  document.body.appendChild(panel);
}

function updatePanel(panel) {
  const elapsed = Math.floor((Date.now() - startTime) / 1000);
  panel.innerHTML = `
    <h3 style="margin: 0 0 10px 0; color: #ff0000;">KHAN MODED</h3>
    <div style="margin-bottom: 10px;">
      <strong>Estadísticas:</strong><br>
      Ejercicios: ${stats.exercisesCompleted}<br>
      Videos: ${stats.videosWatched}<br>
      Tiempo ahorrado: ${Math.floor(stats.timeSaved / 60)}min ${stats.timeSaved % 60}s<br>
      Tiempo activo: ${Math.floor(elapsed / 60)}min ${elapsed % 60}s
    </div>
    <label>
      Intervalo de clics (ms):
      <input type="number" id="clickInterval" value="${config.clickInterval}" min="1000" max="60000" style="width: 100%; margin: 5px 0;">
    </label>
    <label>
      <input type="checkbox" id="videoBypass" ${config.videoBypassEnabled ? 'checked' : ''}> Bypass de videos
    </label>
    <label>
      <input type="checkbox" id="autoResolver" ${autoResolverEnabled ? 'checked' : ''}> Auto-resolver
    </label>
    <button id="togglePanel" style="margin-top: 10px; width: 100%;">Minimizar</button>
  `;

  // Re-asignar eventos
  setTimeout(() => {
    document.getElementById('clickInterval')?.addEventListener('change', (e) => {
      config.clickInterval = parseInt(e.target.value);
      sendToast(`Intervalo actualizado: ${config.clickInterval}ms`, 2000);
    });

    document.getElementById('videoBypass')?.addEventListener('change', (e) => {
      config.videoBypassEnabled = e.target.checked;
      sendToast(`Bypass de videos: ${config.videoBypassEnabled ? 'Activado' : 'Desactivado'}`, 2000);
    });

    document.getElementById('autoResolver')?.addEventListener('change', (e) => {
      autoResolverEnabled = e.target.checked;
      sendToast(`Auto-resolver: ${autoResolverEnabled ? 'Activado' : 'Desactivado'}`, 2000);
      if (autoResolverEnabled) startAutoResolver();
    });

    document.getElementById('togglePanel')?.addEventListener('click', () => {
      const content = panel.querySelectorAll('*:not(#togglePanel)');
      content.forEach(el => el.style.display = el.style.display === 'none' ? 'block' : 'none');
      panel.querySelector('#togglePanel').textContent = content[0].style.display === 'none' ? 'Maximizar' : 'Minimizar';
    });
  }, 100);
}

// Funciones helpers
const delay = ms => new Promise(resolve => setTimeout(resolve, ms));
const findAndClickBySelector = selector => document.querySelector(selector)?.click();

function sendToast(text, duration = 5000, gravity = 'bottom') {
  Toastify({
    text,
    duration,
    gravity,
    position: "center",
    stopOnFocus: true,
    style: { background: "#000000" }
  }).showToast();
}

async function showSplashScreen() {
  splashScreen.style.cssText = "position:fixed;top:0;left:0;width:100%;height:100%;background-color:#000;display:flex;align-items:center;justify-content:center;z-index:9999;opacity:0;transition:opacity 0.5s ease;user-select:none;color:white;font-family:MuseoSans,sans-serif;font-size:30px;text-align:center;";
  splashScreen.innerHTML = '<span style="color:white;">KHAN  </span><span style="color:#ff0000;"> MODED</span>';
  document.body.appendChild(splashScreen);
  setTimeout(() => splashScreen.style.opacity = '1', 10);
}

async function hideSplashScreen() {
  splashScreen.style.opacity = '0';
  setTimeout(() => splashScreen.remove(), 1000);
}

async function loadScript(url, label) {
  const response = await fetch(url);
  const script = await response.text();
  loadedPlugins.push(label);
  eval(script);
}

async function loadCss(url) {
  return new Promise(resolve => {
    const link = document.createElement('link');
    link.rel = 'stylesheet';
    link.type = 'text/css';
    link.href = url;
    link.onload = resolve;
    document.head.appendChild(link);
  });
}

function startAutoResolver() {
  if (!autoResolverEnabled) return;

  // Buscar tareas incompletas (filas de tabla que no dicen 'completado')
  const taskRows = document.querySelectorAll('table tr');
  for (const row of taskRows) {
    const statusCell = row.querySelector('td:last-child');
    if (statusCell && !statusCell.textContent.includes('completado') && !statusCell.textContent.includes('Completo')) {
      const link = row.querySelector('a');
      if (link) {
        link.click();
        sendToast('Abriendo tarea incompleta...', 3000);
        return; // Solo una a la vez
      }
    }
  }

  // Si no hay tareas, buscar unidades incompletas
  const unitLinks = document.querySelectorAll('a[href*="/classroom/"]');
  for (const link of unitLinks) {
    const parent = link.closest('[data-testid]');
    if (parent && !parent.textContent.includes('dominado') && !parent.textContent.includes('Dominado')) {
      link.click();
      sendToast('Abriendo unidad incompleta...', 3000);
      return;
    }
  }

  sendToast('No se encontraron tareas o unidades incompletas.', 3000);
}

function setupMain() {
  const originalFetch = window.fetch;

  window.fetch = async function(input, init) {
    let body;
    if (input instanceof Request) {
      body = await input.clone().text();
    } else if (init?.body) {
      body = init.body;
    }

    if (config.videoBypassEnabled && body?.includes('"operationName":"updateUserVideoProgress"')) {
      try {
        let bodyObj = JSON.parse(body);
        if (bodyObj.variables?.input) {
          const durationSeconds = bodyObj.variables.input.durationSeconds;
          bodyObj.variables.input.secondsWatched = durationSeconds;
          bodyObj.variables.input.lastSecondWatched = durationSeconds;
          body = JSON.stringify(bodyObj);

          if (input instanceof Request) {
            input = new Request(input, { body });
          } else {
            init.body = body;
          }

          stats.videosWatched++;
          stats.timeSaved += durationSeconds;
          updatePanel(document.getElementById('khanModPanel'));
          sendToast("✅｜Bypass injected¡", 1500);
        }
      } catch (e) {}
    }

    const originalResponse = await originalFetch.apply(this, arguments);

    try {
      const clonedResponse = originalResponse.clone();
      const responseBody = await clonedResponse.text();
      let responseObj = JSON.parse(responseBody);

      if (responseObj?.data?.assessmentItem?.item?.itemData) {
        let itemData = JSON.parse(responseObj.data.assessmentItem.item.itemData);

        if (itemData.question.content[0] === itemData.question.content[0].toUpperCase()) {
          itemData.answerArea = {
            calculator: false,
            chi2Table: false,
            periodicTable: false,
            tTable: false,
            zTable: false
          };

          itemData.question.content = "modified by: rxdrzx_ @tk @ig " + `[[☃ radio 1]]`;
          itemData.question.widgets = {
            "radio 1": {
              type: "radio",
              options: {
               choices: [{ content: "correct ✅", correct: true },
        { content: "incorrect ❌", correct: false }]
              }
            }
          };

          responseObj.data.assessmentItem.item.itemData = JSON.stringify(itemData);

          return new Response(JSON.stringify(responseObj), {
            status: originalResponse.status,
            statusText: originalResponse.statusText,
            headers: originalResponse.headers
          });
        }
      }
    } catch (e) {}

    return originalResponse;
  };

  (async () => {
    const selectors = [
      `[data-testid="choice-icon__library-choice-icon"]`,
      `[data-testid="exercise-check-answer"]`,
      `[data-testid="exercise-next-question"]`,
      `._1udzurba`,
      `._awve9b`
    ];

    window.khanwareDominates = true;

    while (window.khanwareDominates) {
      for (const selector of selectors) {
        findAndClickBySelector(selector);

        const element = document.querySelector(`${selector}> div`);
        if (element?.innerText === "Mostrar resumo") {
          stats.exercisesCompleted++;
          updatePanel(document.getElementById('khanModPanel'));
          sendToast("🎉｜Exercício concluído!", 3000);
        }
      }
      await delay(config.clickInterval);
    }
  })();
}

if (!/^https?:\/\/([a-z0-9-]+\.)?khanacademy\.org/.test(window.location.href)) { window.location.href = "https://pt.khanacademy.org/";
} else {
  (async function init() {
    // Sistema de activación
    const userKey = prompt('Ingresa la clave de activación para Khan Modded:');
    if (!userKey || atob(ENCODED_ACTIVATION_KEY) !== userKey) {
      alert('Clave incorrecta. El script no se activará.');
      return;
    }
    isActivated = true;
    sendToast('Clave correcta. Activando script...', 3000);

    await showSplashScreen();

    await Promise.all([
      loadScript('https://cdn.jsdelivr.net/npm/darkreader@4.9.92/darkreader.min.js', 'darkReaderPlugin').then(()=>{ DarkReader.setFetchMethod(window.fetch); DarkReader.enable(); }),
      loadCss('https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.css'),
      loadScript('https://cdn.jsdelivr.net/npm/toastify-js', 'toastifyPlugin')
    ]);

    await delay(2000);
    await hideSplashScreen();

    createFloatingPanel();
    setupMain();
    if (autoResolverEnabled) startAutoResolver();
    sendToast("😴｜injected!");
    console.clear();
  })();
}
